{"version":3,"sources":["Components/inputs/totalrun.js","Components/inputs/totalrise.js","Components/inputs/idealrun.js","Components/inputs/idealrise.js","Components/inputs/details.js","Components/inputs/stairangle.js","Components/inputs/height.js","Components/inputs/flooropening.js","Components/inputs/floorthickness.js","Components/stair.js","App.js","serviceWorker.js","index.js"],"names":["TotalRun","props","id","defaultValue","totalRunft","onChange","changetotalRunft","Array","from","e","i","value","key","totalRunin","changetotalRunin","totalRunfr","changetotalRunfr","TotalRise","totalRiseft","changetotalRiseft","totalRisein","changetotalRisein","totalRisefr","changetotalRisefr","IdealRun","idealRunin","changeidealRunin","idealRunfr","changeidealRunfr","IdealRise","idealRisein","changeidealRisein","idealRisefr","changeidealRisefr","Details","stringerin","changestringerin","stringerfr","changestringerfr","StairAngle","type","min","max","Height","FloorOpening","FloorThickness","floorft","changefloorft","floorin","changefloorin","floorfr","changefloorfr","Stair","windowWidth","window","innerWidth","move","totalRun","parseInt","parseFloat","totalRise","idealRun","idealRise","xCount","yCount","stringerA","Math","sin","atan","stringerB","coordinates","floorThickness","boolean","push","length","width","height","innerHeight","x","y","points","stroke","strokeWidth","lineCap","lineJoin","closed","App","state","runOn","runCount","riseCount","riseChange","runChange","event","setState","target","className","this","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.003e595d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TotalRun = (props) => {\r\n\r\n    let selectFeet = 60 + 1;\r\n    let selectInches = 11 + 1;\r\n    let selectFractions = 16;\r\n\r\n\r\n    return (\r\n        <div>\r\n            <label>Total run</label>\r\n            <select id=\"totalRunFeet\" defaultValue={props.totalRunft} onChange={props.changetotalRunft}>\r\n                {Array.from(Array(selectFeet), (e, i) => {\r\n                    return ( <option value={i*12} key={i*12}>{i +\"'\"}</option> )\r\n                })}\r\n            </select>\r\n            <select id=\"totalRunInches\" defaultValue={props.totalRunin} onChange={props.changetotalRunin}>\r\n                {Array.from(Array(selectInches), (e, i) => {\r\n                    return ( <option value={i} key={i}>{i +'\"'}</option> )\r\n                })}\r\n            </select>\r\n            <select id=\"totalRunFraction\" defaultValue={props.totalRunfr} onChange={props.changetotalRunfr}>\r\n                {Array.from(Array(selectFractions), (e, i) => {\r\n                    return ( <option value={i * 0.0625} key={i * 0.0625}>{i + \"/16\"}</option> )\r\n                })}\r\n            </select>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default TotalRun","import React from 'react';\r\n\r\nconst TotalRise = (props) => {\r\n\r\n    let selectFeet = 30 + 1;\r\n    let selectInches = 11 + 1;\r\n    let selectFractions = 16;\r\n\r\n    return (\r\n        <div>\r\n            <label>Total rise</label>\r\n            <select id=\"totalRiseft\" defaultValue={props.totalRiseft} onChange={props.changetotalRiseft}>\r\n                {Array.from(Array(selectFeet), (e, i) => {\r\n                    return ( <option value={i*12} key={i*12}>{i +\"'\"}</option> )\r\n                })}\r\n            </select>\r\n            <select id=\"totalRisein\" defaultValue={props.totalRisein} onChange={props.changetotalRisein}>\r\n                {Array.from(Array(selectInches), (e, i) => {\r\n                    return ( <option key={i}>{i +'\"'}</option> )\r\n                })}\r\n            </select>\r\n            <select id=\"totalRiseft\" defaultValue={props.totalRisefr} onChange={props.changetotalRisefr}>\r\n                {Array.from(Array(selectFractions), (e, i) => {\r\n                    return ( <option key={i * 0.0625}>{i + \"/16\"}</option> )\r\n                })}\r\n            </select>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default TotalRise","import React from 'react';\r\n\r\nconst IdealRun = (props) => {\r\n\r\n    let selectInches = 11 + 1;\r\n    let selectFractions = 16;\r\n\r\n    return (\r\n        <div>\r\n            <label>Ideal run</label>\r\n            <select defaultValue={props.idealRunin} onChange={props.changeidealRunin}>\r\n                {Array.from(Array(selectInches), (e, i) => {\r\n                    return ( <option value={i} key={i}>{i +'\"'}</option> )\r\n                })}\r\n            </select>\r\n            <select defaultValue={props.idealRunfr} onChange={props.changeidealRunfr}>\r\n                {Array.from(Array(selectFractions), (e, i) => {\r\n                    return ( <option value={i * 0.0625} key={i * 0.0625}>{i + \"/16\"}</option> )\r\n                })}\r\n            </select>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default IdealRun","import React from 'react';\r\n\r\nconst IdealRise = (props) => {\r\n\r\n    let selectInches = 11 + 1;\r\n    let selectFractions = 16;\r\n\r\n    return (\r\n        <div>\r\n            <label>Ideal rise</label>\r\n            <select defaultValue={props.idealRisein} onChange={props.changeidealRisein}>\r\n                {Array.from(Array(selectInches), (e, i) => {\r\n                    return ( <option value={i} key={i}>{i +'\"'}</option> )\r\n                })}\r\n            </select>\r\n            <select defaultValue={props.idealRisefr} onChange={props.changeidealRisefr}>\r\n                {Array.from(Array(selectFractions), (e, i) => {\r\n                    return ( <option value={i * 0.0625} key={i * 0.0625}>{i + \"/16\"}</option> )\r\n                })}\r\n            </select>\r\n        </div>  \r\n\r\n    )\r\n}\r\n\r\nexport default IdealRise","import React from 'react';\r\n\r\nconst Details = (props) => {\r\n\r\n    let selectInches = 6 + 1;\r\n    let selectFractions = 16;\r\n    let selectStringer = 11 + 1;\r\n\r\n    return (\r\n        <div>\r\n            <div>Details</div>\r\n            <div>\r\n                <label>Tread thickness</label>\r\n                <select>\r\n                    {Array.from(Array(selectInches), (e, i) => {\r\n                        return ( <option key={i}>{i +'\"'}</option> )\r\n                    })}\r\n                </select>\r\n                <select>\r\n                    {Array.from(Array(selectFractions), (e, i) => {\r\n                        return ( <option key={i * 0.0625}>{i + \"/16\"}</option> )\r\n                    })}\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <label>Riser thickness</label>\r\n                <select>\r\n                    {Array.from(Array(selectInches), (e, i) => {\r\n                        return ( <option key={i}>{i +'\"'}</option> )\r\n                    })}\r\n                </select>\r\n                <select>\r\n                    {Array.from(Array(selectFractions), (e, i) => {\r\n                        return ( <option key={i * 0.0625}>{i + \"/16\"}</option> )\r\n                    })}\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <label>Nosing</label>\r\n                <select>\r\n                    {Array.from(Array(selectInches), (e, i) => {\r\n                        return ( <option key={i}>{i +'\"'}</option> )\r\n                    })}\r\n                </select>\r\n                <select>\r\n                    {Array.from(Array(selectFractions), (e, i) => {\r\n                        return ( <option key={i * 0.0625}>{i + \"/16\"}</option> )\r\n                    })}\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <label>Stringer Width</label>\r\n                <select defaultValue={props.stringerin} onChange={props.changestringerin}>\r\n                    {Array.from(Array(selectStringer), (e, i) => {\r\n                        return ( <option key={i}>{i +'\"'}</option> )\r\n                    })}\r\n                </select>\r\n                <select defaultValue={props.stringerfr} onChange={props.changestringerfr}>\r\n                    {Array.from(Array(selectFractions), (e, i) => {\r\n                        return ( <option key={i * 0.0625}>{i + \"/16\"}</option> )\r\n                    })}\r\n                </select>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Details ","import React from 'react';\r\n\r\nconst StairAngle = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <label>Stair Angle</label>\r\n            <input type=\"range\" min=\"30\" max=\"45\"/>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default StairAngle","import React from 'react';\r\n\r\nconst Height = (props) => {\r\n\r\n    let maxHeight = 15 + 1;\r\n    let selectInches = 11 + 1;\r\n    let selectFractions = 16;\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <label>Height</label>\r\n            <input type=\"range\" min=\"30\" max=\"45\"/>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default Height","import React from 'react';\r\n\r\nconst FloorOpening = (props) => {\r\n\r\n    let maxOpening = 15 + 1;\r\n    let selectInches = 11 + 1;\r\n    let selectFractions = 16;\r\n\r\n    return (\r\n        <div>\r\n            <label>Floor Opening</label>\r\n            <select>\r\n                {Array.from(Array(maxOpening), (e, i) => {\r\n                    return ( <option key={i*12}>{i +\"'\"}</option> )\r\n                })}\r\n            </select>\r\n            <select>\r\n                {Array.from(Array(selectInches), (e, i) => {\r\n                    return ( <option key={i}>{i +'\"'}</option> )\r\n                })}\r\n            </select>\r\n            <select>\r\n                {Array.from(Array(selectFractions), (e, i) => {\r\n                    return ( <option key={i * 0.0625}>{i + \"/16\"}</option> )\r\n                })}\r\n            </select>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default FloorOpening","import React from 'react';\r\n\r\nconst FloorThickness = (props) => {\r\n\r\n    let maxThickness = 15 + 1;\r\n    let selectInches = 11 + 1;\r\n    let selectFractions = 16;\r\n\r\n    return (\r\n        <div>\r\n            <label>Floor Thickness</label>\r\n            <select defaultValue={props.floorft} onChange={props.changefloorft}>\r\n                {Array.from(Array(maxThickness), (e, i) => {\r\n                    return ( <option key={i*12}>{i +\"'\"}</option> )\r\n                })}\r\n            </select>\r\n            <select defaultValue={props.floorin} onChange={props.changefloorin}>\r\n                {Array.from(Array(selectInches), (e, i) => {\r\n                    return ( <option key={i}>{i +'\"'}</option> )\r\n                })}\r\n            </select>\r\n            <select defaultValue={props.floorfr} onChange={props.changefloorfr}>\r\n                {Array.from(Array(selectFractions), (e, i) => {\r\n                    return ( <option key={i * 0.0625}>{i + \"/16\"}</option> )\r\n                })}\r\n            </select>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default FloorThickness","import React from 'react';\r\nimport { Stage, Layer, Line } from 'react-konva';\r\n\r\nconst Stair = (props) => {\r\n\r\n  let windowWidth = window.innerWidth * 0.65;\r\n  let move = [windowWidth/2,100];\r\n\r\n  let totalRun = parseInt(props.totalRunft) + parseInt(props.totalRunin) + parseFloat(props.totalRunfr);\r\n  let totalRise = parseInt(props.totalRiseft) + parseInt(props.totalRisein) + parseFloat(props.totalRisefr);\r\n\r\n  let idealRun = parseFloat(props.idealRunin) + parseFloat(props.idealRunfr);\r\n  let idealRise = parseFloat(props.idealRisein) + parseFloat(props.idealRisefr);\r\n\r\n  let xCount = parseInt(totalRun/idealRun);\r\n  let yCount = parseInt(totalRise/idealRise);\r\n\r\n  let landing = 36;\r\n\r\n  let stringerA = (parseFloat(props.stringerin) + parseFloat(props.stringerfr)) / Math.sin(Math.atan(idealRun / idealRise));\r\n  let stringerB = (parseFloat(props.stringerin) + parseFloat(props.stringerfr)) / Math.sin(Math.atan(idealRise / idealRun));\r\n\r\n  let coordinates = [];\r\n\r\n  let floorThickness = (parseFloat(props.floorft) + parseFloat(props.floorin) + parseFloat(props.floorfr));\r\n\r\n\r\n  if (props.boolean === true){\r\n    for (let i=0; i<xCount; i++){\r\n      coordinates.push( (totalRise)-(idealRun*i), idealRise*i, (totalRise)-(idealRun*(i+1)), idealRise*i, (totalRise)-(idealRun*(i+1)), (idealRise*(i+1)) )\r\n    }\r\n    coordinates.push( (coordinates[coordinates.length-2]+stringerB), coordinates[coordinates.length-1], coordinates[0], stringerA, coordinates[0], floorThickness, (coordinates[0]+landing), floorThickness, (coordinates[0]+landing), 0)\r\n  } else if (props.boolean === false){\r\n    for (let i=0; i<yCount; i++){\r\n      coordinates.push( (totalRun)-(idealRun*i), idealRise*i, (totalRun)-(idealRun*(i+1)), idealRise*i, (totalRun)-(idealRun*(i+1)), (idealRise*(i+1)) )\r\n    }\r\n    coordinates.push( (coordinates[coordinates.length-2]+stringerB), coordinates[coordinates.length-1], coordinates[0], stringerA, coordinates[0], floorThickness, (coordinates[0]+landing), floorThickness, (coordinates[0]+landing), 0)\r\n  }\r\n\r\n  return (\r\n    <Stage width={windowWidth} height={window.innerHeight}>\r\n        <Layer>\r\n          <Line\r\n            x={move[0]}\r\n            y={move[1]}\r\n            points={coordinates}\r\n            stroke=\"black\"\r\n            strokeWidth={2}\r\n            lineCap='sqare'\r\n            lineJoin='sqare'\r\n            closed='true'\r\n          />\r\n        <Line\r\n            x={move[0]}\r\n            y={move[1]}\r\n            points={[0, 0, 0, 200]}\r\n            stroke=\"black\"\r\n            strokeWidth={2}\r\n            lineCap='sqare'\r\n            lineJoin='sqare'\r\n            \r\n          />\r\n        </Layer>\r\n      </Stage>\r\n  )\r\n}\r\n\r\nexport default Stair","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport TotalRun from './Components/inputs/totalrun';\nimport TotalRise from './Components/inputs/totalrise';\nimport IdealRun from './Components/inputs/idealrun';\nimport IdealRise from './Components/inputs/idealrise';\nimport Details from './Components/inputs/details';\nimport StairAngle from './Components/inputs/stairangle';\nimport Height from './Components/inputs/height';\nimport FloorOpening from './Components/inputs/flooropening';\nimport FloorThickness from './Components/inputs/floorthickness';\nimport Stair from './Components/stair';\n\n\nclass App extends Component {\n\n  state = {\n    totalRunft: 10 * 12,\n    totalRunin: 0,\n    totalRunfr: 0,\n\n    totalRiseft: 6 * 12,\n    totalRisein: 0,\n    totalRisefr: 0,\n\n    idealRisein: 7,\n    idealRisefr: 0,\n\n    idealRunin: 11,\n    idealRunfr: 0,\n\n    stringerin: 7 * Math.sin(Math.atan(7 / 11)),\n    stringerfr: 0,\n\n    floorft: 0,\n    floorin: 7,\n    floorfr: 0,\n    \n\n    runOn: true\n\n  }\n\n  //Retrieves run count\n  runCount = () => {\n    let sumRuntotal = parseInt( parseInt(this.state.totalRunft) + parseInt(this.state.totalRunin) + parseFloat(this.state.totalRunfr) );\n    let sumRunideal = parseInt( parseInt(this.state.idealRunin) + parseFloat(this.state.idealRunfr) );\n    return ( sumRuntotal / sumRunideal )\n  }\n\n  //Retrieves rise count\n  riseCount = () => {\n    let sumRisetotal = parseInt( parseInt(this.state.totalRiseft) + parseInt(this.state.totalRisein) + parseFloat(this.state.totalRisefr) );\n    let sumRiseideal = parseInt( parseInt(this.state.idealRisein) + parseFloat(this.state.idealRisefr) );\n    return ( sumRisetotal / sumRiseideal )\n  }\n\n  //Changes rise input values based on run\n  riseChange = () => {\n    let totalRise = this.runCount * (parseInt( parseInt(this.state.idealRisein) + parseFloat(this.state.idealRisefr) ) );\n    return totalRise\n  }\n\n  //Changes run input values based on rise\n  runChange = () => {\n    let totalRun = this.riseCount * (parseInt( parseInt(this.state.idealRunin) + parseFloat(this.state.idealRunfr) ) );\n    return totalRun\n  }\n\n  //Handlers for changing total run\n  changetotalRunft = (event) => {\n      this.setState({\n        totalRunft:event.target.value,\n        runOn: true\n      })\n  }\n  changetotalRunin = (event) => {\n      this.setState({\n        totalRunin:event.target.value,\n        runOn: true\n      })\n  }\n  changetotalRunfr = (event) => {\n      this.setState({\n        totalRunfr:event.target.value,\n        runOn: true\n      })\n  }\n\n  //Handlers for changing total rise\n  changetotalRiseft = (event) => {\n      this.setState({\n        totalRiseft:event.target.value,\n        runOn: false\n      })\n  }\n  changetotalRisein = (event) => {\n      this.setState({\n        totalRisein:event.target.value,\n        runOn: false\n      })\n  }\n  changetotalRisefr = (event) => {\n      this.setState({\n        totalRisefr:event.target.value,\n        runOn: false\n      })\n  }\n\n  //Handlers for changing ideal run\n  changeidealRunin = (event) => {\n    this.setState({idealRunin:event.target.value})\n  }\n  changeidealRunfr = (event) => {\n      this.setState({idealRunfr:event.target.value})\n  }\n\n  //Handlers for changing ideal rise\n  changeidealRisein = (event) => {\n      this.setState({idealRisein:event.target.value})\n  }\n  changeidealRisefr = (event) => {\n      this.setState({idealRisefr:event.target.value})\n  }\n\n  //Handlers for changing stringer\n  changestringerin = (event) => {\n    this.setState({stringerin:event.target.value})\n  }\n\n  changestringerfr = (event) => {\n    this.setState({stringerfr:event.target.value})\n  }\n\n  //Handlers for changing floor thickness\n  changefloorft = (event) => {\n    this.setState({floorft:event.target.value})\n  }\n\n  changefloorin = (event) => {\n    this.setState({floorin:event.target.value})\n  }\n\n  changefloorfr = (event) => {\n    this.setState({floorfr:event.target.value})\n  }\n    \n  \n\n  render(){\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n\n          <div id=\"sidebar\" className=\"col-4\">\n              <div>\n                <div>Rise-run</div>\n                <TotalRun \n                    totalRunft = {this.state.totalRunft}\n                    totalRunin = {this.state.totalRunin}\n                    totalRunfr = {this.state.totalRunfr}\n                    changetotalRunft = {this.changetotalRunft}\n                    changetotalRunin = {this.changetotalRunin}\n                    changetotalRunfr = {this.changetotalRunfr}\n                />\n                <TotalRise \n                    totalRiseft = {this.state.totalRiseft}\n                    totalRisein = {this.state.totalRisein}\n                    totalRisefr = {this.state.totalRisefr}\n                    changetotalRiseft = {this.changetotalRiseft}\n                    changetotalRisein = {this.changetotalRisein}\n                    changetotalRisefr = {this.changetotalRisefr}\n                />\n                <IdealRun \n                    idealRunin = {this.state.idealRunin}\n                    idealRunfr = {this.state.idealRunfr}\n                    changeidealRunin = {this.changeidealRunin}\n                    changeidealRunfr = {this.changeidealRunfr}\n                />\n                <IdealRise \n                    idealRisein = {this.state.idealRisein}\n                    idealRisefr = {this.state.idealRisefr}\n                    changeidealRisein = {this.changeidealRisein}\n                    changeidealRisefr = {this.changeidealRisefr}\n                />\n              </div>\n\n            <Details \n              stringerin={this.state.stringerin}\n              stringerfr={this.state.stringerfr}\n              changestringerin={this.changestringerin}\n              changestringerfr={this.changestringerfr}\n            />\n\n            <div>\n                <div>Headroom</div>\n                <Height />\n                <FloorOpening />\n                <FloorThickness \n                  floorft={this.state.floorft}\n                  floorin={this.state.floorin}\n                  floorfr={this.state.floorfr}\n                  changefloorft={this.changefloorft}\n                  changefloorin={this.changefloorin}\n                  changefloorfr={this.changefloorfr}\n                />\n\n            </div>\n\n            <StairAngle />\n        </div>\n\n        <div className=\"col-8\" id=\"container\">\n          <Stair \n            totalRunft={this.state.totalRunft}\n            totalRunin={this.state.totalRunin}\n            totalRunfr={this.state.totalRunfr}\n            totalRiseft={this.state.totalRiseft}\n            totalRisein={this.state.totalRisein}\n            totalRisefr={this.state.totalRisefr}\n            idealRunin={this.state.idealRunin}\n            idealRunfr={this.state.idealRunfr}\n            idealRisein={this.state.idealRisein}\n            idealRisefr={this.state.idealRisefr}\n            boolean={this.state.runOn}\n            runCount={this.state.runCount}\n            riseCount={this.state.riseCount}\n            stringerin={this.state.stringerin}\n            stringerfr={this.state.stringerfr}\n            floorft={this.state.floorft}\n            floorin={this.state.floorin}\n            floorfr={this.state.floorfr}\n          />\n        </div>\n        \n      </div>\n\n    </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}